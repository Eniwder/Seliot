package lexer

object Tokens {

  val ABSTRACT = Token("abstract")
  val CASE = Token("case")
  val CATCH = Token("catch")
  val CLASS = Token("class")
  val DEF = Token("def")
  val DO = Token("do")
  val ELSE = Token("else")
  val EXTENDS = Token("extends")
  val FALSE = Token("false")
  val FINAL = Token("final")
  val FINALLY = Token("finally")
  val FOR = Token("for")
  val FORSOME = Token("forSome")
  val IF = Token("if")
  val IMPLICIT = Token("implicit")
  val IMPORT = Token("import")
  val LAZY = Token("lazy")
  val MATCH = Token("match")
  val NEW = Token("new")
  val NULL = Token("null")
  val OBJECT = Token("object")
  val OVERRIDE = Token("override")
  val PACKAGE = Token("package")
  val PRIVATE = Token("private")
  val PROTECTED = Token("protected")
  val RETURN = Token("return")
  val SEALED = Token("sealed")
  val SUPER = Token("super")
  val THIS = Token("this")
  val THROW = Token("throw")
  val TRAIT = Token("trait")
  val TRY = Token("try")
  val TRUE = Token("true")
  val TYPE = Token("type")
  val VAL = Token("val")
  val VAR = Token("var")
  val WHILE = Token("while")
  val WITH = Token("with")
  val YIELD = Token("yield")
  val US = Token("_")
  val CL = Token(":")
  val EQ = Token("=")
  val RARROW = Token("=> | ⇒")
  val LARROW = Token("<- | ←")
  val SUBTYPE = Token("<:")
  val VIEWBOUND = Token("<%")
  val SUPERTYPE = Token(">:")
  val HASH = Token("#")
  val AT = Token("@")

  val SEMI = Token(";")

}
